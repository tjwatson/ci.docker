FROM registry.access.redhat.com/ubi8/ubi:latest

ARG LIBERTY_VERSION_BASE=22.0.0.8
ARG LIBERTY_VERSION=$LIBERTY_VERSION_BASE-beta
ARG LIBERTY_SHA=f4eb1ef72fedd3587a1a522fd3360f7d0221e0f73305f9e4b36256543f5f9c1d
ARG LIBERTY_BUILD_LABEL=cl220820220720-1100
ARG LIBERTY_NIGHTLY_DIR=2022-07-20_1100
ARG LIBERTY_NIGHTLY_PATH=$LIBERTY_NIGHTLY_DIR/openliberty-dev-$LIBERTY_VERSION_BASE-$LIBERTY_BUILD_LABEL.zip
ARG LIBERTY_DOWNLOAD_URL=https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/nightly/$LIBERTY_NIGHTLY_PATH
ARG LIBERTY_LICENSE_URL=https://raw.githubusercontent.com/OpenLiberty/open-liberty/master/LICENSE
ARG LIBERTY_LICENSE_SHA=84f00503d6516c91190de866e78d6010899673b7
ARG OPENJ9_SCC=true
ARG VERBOSE=false

LABEL org.opencontainers.image.authors="Arthur De Magalhaes, Chris Potter, Leo Christy Jesuraj" \
      org.opencontainers.image.vendor="Open Liberty" \
      org.opencontainers.image.url="https://openliberty.io/" \
      org.opencontainers.image.source="https://github.com/OpenLiberty/ci.docker" \
      org.opencontainers.image.revision="$LIBERTY_BUILD_LABEL" \
      org.opencontainers.image.description="This image contains the Open Liberty beta runtime with IBM Semeru Runtime Open Edition OpenJDK 11 with OpenJ9 and Ubuntu as the base OS.  For more information on this image please see https://github.com/OpenLiberty/ci.docker#building-an-application-image" \
      org.opencontainers.image.title="Open Liberty Beta" \
      org.opencontainers.image.version="$LIBERTY_VERSION"

RUN set -eu; \
    dnf install -y \
# CRIU dependencies
       iptables-libs jansson libibverbs libmnl libnet libnftnl libpcap nftables protobuf-c \
# Semeru dependencies
       tzdata openssl curl ca-certificates fontconfig glibc-langpack-en tar; \
    dnf clean all; \
    useradd -u 1001 -r -g 0 -s /usr/sbin/nologin default;


# TODO set the java version correctly
ENV JAVA_VERSION jdk-11.0.15-ea+6

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

# Requirements to install Java

# TODO set the URLs for each arch
 RUN set -eux; \
    ARCH="$(uname -m)"; \
    case "${ARCH}" in \
       aarch64|arm64) \
         ESUM='junk'; \
         BINARY_URL='junk'; \
         ;; \
       ppc64el|ppc64le) \
         ESUM='junk'; \
         BINARY_URL='junk'; \
         ;; \
       s390x) \
         ESUM='junk'; \
         BINARY_URL='junk'; \
         ;; \
       amd64|x86_64) \
         ESUM='3365130ce80e8ba2188f48e7fce3705d79429d6771caa82670c822e43c2d3caf'; \
         BINARY_URL='https://openj9-artifactory.osuosl.org/artifactory/ci-openj9/Build_JDK11_x86-64_linux_criu_Nightly/74/OpenJ9-JDK11-x86-64_linux_criu-20220720-003756.tar.gz'; \
         ;; \
       *) \
         echo "Unsupported arch: ${ARCH}"; \
         exit 1; \
         ;; \
    esac; \
    curl -LfsSo /tmp/openjdk.tar.xz ${BINARY_URL}; \
    echo "${ESUM} */tmp/openjdk.tar.xz" | sha256sum -c -; \
# TODO temporary to create jre until EA build is available
    mkdir /tmp/jdk-extract; \
    cd /tmp/jdk-extract; \
    tar -xf /tmp/openjdk.tar.xz --strip-components=1; \
    ./bin/jlink --no-header-files --no-man-pages --compress=2 --add-modules java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,java.management.rmi,java.naming,java.net.http,java.prefs,java.rmi,java.scripting,java.se,java.security.jgss,java.security.sasl,java.smartcardio,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.accessibility,jdk.attach,jdk.charsets,jdk.compiler,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.dynalink,jdk.editpad,jdk.httpserver,jdk.internal.ed,jdk.internal.jvmstat,jdk.internal.le,jdk.internal.opt,jdk.jartool,jdk.javadoc,jdk.jcmd,jdk.jconsole,jdk.jdeps,jdk.jdi,jdk.jdwp.agent,jdk.jlink,jdk.jshell,jdk.jsobject,jdk.localedata,jdk.management,jdk.management.agent,jdk.naming.dns,jdk.naming.ldap,jdk.naming.rmi,jdk.net,jdk.pack,jdk.rmic,jdk.scripting.nashorn,jdk.scripting.nashorn.shell,jdk.sctp,jdk.security.auth,jdk.security.jgss,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,jdk.zipfs,openj9.criu,openj9.cuda,openj9.dataaccess,openj9.dtfj,openj9.dtfjview,openj9.gpu,openj9.jvm,openj9.sharedclasses,openj9.traceformat,openj9.zosconditionhandling --output /opt/java/openjdk; \
    rm -rf /tmp/jdk-extract; \
#    mkdir -p /opt/java/openjdk; \
#    cd /opt/java/openjdk; \
#    tar -xf /tmp/openjdk.tar.xz --strip-components=1; \
    rm -rf /tmp/openjdk.tar.xz;

ENV JAVA_HOME=/opt/java/openjdk \
    PATH="/opt/java/openjdk/bin:$PATH"
ENV JAVA_TOOL_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal"

# Install Open Liberty
RUN set -eux; \
    yum -y install wget unzip; \
    wget -q $LIBERTY_DOWNLOAD_URL -U UA-Open-Liberty-Docker -O /tmp/wlp.zip; \
    echo "$LIBERTY_SHA */tmp/wlp.zip" | sha256sum -c -; \
    unzip -q /tmp/wlp.zip -d /opt/ol; \
    rm /tmp/wlp.zip; \
    mkdir -p /licenses; \
    wget -q $LIBERTY_LICENSE_URL -O /licenses/LICENSE; \
    echo "$LIBERTY_LICENSE_SHA /licenses/LICENSE" | sha1sum -c --strict --check; \
    wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64; \
    chmod +x /usr/bin/dumb-init; \
    yum -y remove wget unzip; \
    yum clean all; \
    chown -R 1001:0 /opt/ol/wlp; \
    chmod -R g+rw /opt/ol/wlp;


COPY helpers /opt/ol/helpers
COPY fixes/ /opt/ol/fixes/

# Set Path Shortcuts
ENV PATH=/opt/ol/wlp/bin:/opt/ol/docker/:/opt/ol/helpers/build:$PATH \
    LOG_DIR=/logs \
    WLP_OUTPUT_DIR=/opt/ol/wlp/output \
    WLP_SKIP_MAXPERMSIZE=true \
    OPENJ9_SCC=$OPENJ9_SCC \
    WLP_IN_CONTAINER=true


# Configure Open Liberty
RUN /opt/ol/wlp/bin/server create --template=javaee8 \
    && rm -rf $WLP_OUTPUT_DIR/.classCache /output/workarea

# Create symlinks && set permissions for non-root user
RUN mkdir /logs \
    && mkdir -p /opt/ol/wlp/usr/shared/resources/lib.index.cache \
    && ln -s /opt/ol/wlp/usr/shared/resources/lib.index.cache /lib.index.cache \
    && mkdir -p $WLP_OUTPUT_DIR/defaultServer \
    && ln -s $WLP_OUTPUT_DIR/defaultServer /output \
    && ln -s /opt/ol/wlp/usr/servers/defaultServer /config \
    && mkdir -p /config/configDropins/defaults \
    && mkdir -p /config/configDropins/overrides \
    && mkdir -p /config/dropins \
    && mkdir -p /config/apps \
    && ln -s /opt/ol/wlp /liberty \
    && chown -R 1001:0 /config \
    && chmod -R g+rw /config \
    && chown -R 1001:0 /logs \
    && chmod -R g+rw /logs \
    && chown -R 1001:0 /opt/ol/wlp/usr \
    && chmod -R g+rw /opt/ol/wlp/usr \
    && chown -R 1001:0 /opt/ol/wlp/output \
    && chmod -R g+rw /opt/ol/wlp/output \
    && chown -R 1001:0 /opt/ol/helpers \
    && chmod -R g+rw /opt/ol/helpers \
    && chown -R 1001:0 /opt/ol/fixes \
    && chmod -R g+rwx /opt/ol/fixes \
    && mkdir /etc/wlp \
    && chown -R 1001:0 /etc/wlp \
    && chmod -R g+rw /etc/wlp \
    && echo "<server description=\"Default Server\"><httpEndpoint id=\"defaultHttpEndpoint\" host=\"*\" /></server>" > /config/configDropins/defaults/open-default-port.xml

# Create a new SCC layer
RUN if [ "$OPENJ9_SCC" = "true" ]; then populate_scc.sh; fi \
    && rm -rf /output/messaging /output/resources/security /logs/* $WLP_OUTPUT_DIR/.classCache \
    && chown -R 1001:0 /opt/ol/wlp/output \
    && chmod -R g+rwx /opt/ol/wlp/output

#These settings are needed so that we can run as a different user than 1001 after server warmup
ENV RANDFILE=/tmp/.rnd \
    OPENJ9_JAVA_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal -Dosgi.checkConfiguration=false"

RUN set -eu; \
    CRIU_DIR_URL=https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/criu-build/b1; \
    CRIU_SHA=0dfac028e9d9c68ca29dd36f884d65e7f5f6a1dd4cbea4493029409471c5d91e; \
    CRIU_LIB_SHA=c857d7f9c59a0b13cfe324420ec04a779b1b3b0715de198c076d74a0fc079fc1; \
    echo "downloading ${CRIU_DIR_URL}/criu"; \
    curl -LfsSo /usr/sbin/criu ${CRIU_DIR_URL}/criu; \
    echo "$CRIU_SHA */usr/sbin/criu" | sha256sum -c -; \
    echo "downloading ${CRIU_DIR_URL}/libcriu.so"; \
    curl -LfsSo /usr/lib64/libcriu.so.2.0 ${CRIU_DIR_URL}/libcriu.so; \
    echo "$CRIU_LIB_SHA */usr/lib64/libcriu.so.2.0" | sha256sum -c -; \
    chmod a+x /usr/sbin/criu; \
    setcap cap_checkpoint_restore,cap_net_admin,cap_sys_ptrace=eip /usr/sbin/criu; \
    cd /usr/lib64; \
    ln -s libcriu.so.2.0 libcriu.so; \
    ln -s libcriu.so.2.0 libcriu.so.2; \
    cd /; \
    if [ ! -d "/opt/java/.scc" ]; then \
      mkdir /opt/java/.scc; \
      chmod -R 0777 /opt/java/.scc; \
    fi;

USER 1001

EXPOSE 9080 9443

ENTRYPOINT ["/opt/ol/helpers/runtime/docker-server.sh"]
CMD ["/opt/ol/wlp/bin/server", "run", "defaultServer"]

